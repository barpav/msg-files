// Code generated by mockery v2.32.0. DO NOT EDIT.

package mocks

import (
	context "context"
	io "io"

	mock "github.com/stretchr/testify/mock"

	models "github.com/barpav/msg-files/internal/rest/models"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// AllocateNewFile provides a mock function with given fields: ctx, info
func (_m *Storage) AllocateNewFile(ctx context.Context, info *models.AllocatedFile) (string, error) {
	ret := _m.Called(ctx, info)

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.AllocatedFile) (string, error)); ok {
		return rf(ctx, info)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *models.AllocatedFile) string); ok {
		r0 = rf(ctx, info)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *models.AllocatedFile) error); ok {
		r1 = rf(ctx, info)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// AllocatedFileInfo provides a mock function with given fields: ctx, id
func (_m *Storage) AllocatedFileInfo(ctx context.Context, id string) (*models.AllocatedFile, error) {
	ret := _m.Called(ctx, id)

	var r0 *models.AllocatedFile
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.AllocatedFile, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.AllocatedFile); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.AllocatedFile)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteFile provides a mock function with given fields: ctx, id
func (_m *Storage) DeleteFile(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DownloadFile provides a mock function with given fields: id, stream
func (_m *Storage) DownloadFile(id string, stream io.Writer) error {
	ret := _m.Called(id, stream)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Writer) error); ok {
		r0 = rf(id, stream)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FileSize provides a mock function with given fields: ctx, id
func (_m *Storage) FileSize(ctx context.Context, id string) (int, error) {
	ret := _m.Called(ctx, id)

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MarkAsUnused provides a mock function with given fields: ctx, fileId
func (_m *Storage) MarkAsUnused(ctx context.Context, fileId string) error {
	ret := _m.Called(ctx, fileId)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, fileId)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UploadFileContent provides a mock function with given fields: id, content
func (_m *Storage) UploadFileContent(id string, content io.Reader) error {
	ret := _m.Called(id, content)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, io.Reader) error); ok {
		r0 = rf(id, content)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
